{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","cab-booking-application/tests/app.lint-test.js","cab-booking-application/tests/helpers/destroy-app.js","cab-booking-application/tests/helpers/ember-simple-auth.js","cab-booking-application/tests/helpers/module-for-acceptance.js","cab-booking-application/tests/helpers/resolver.js","cab-booking-application/tests/helpers/start-app.js","cab-booking-application/tests/integration/components/location-dropdown-test.js","cab-booking-application/tests/integration/components/nav-pane-test.js","cab-booking-application/tests/integration/helpers/is-equals-test.js","cab-booking-application/tests/integration/helpers/shiftlabel-test.js","cab-booking-application/tests/integration/helpers/statuslabel-test.js","cab-booking-application/tests/test-helper.js","cab-booking-application/tests/tests.lint-test.js","cab-booking-application/tests/unit/controllers/application-test.js","cab-booking-application/tests/unit/controllers/boookings-test.js","cab-booking-application/tests/unit/controllers/drivers-test.js","cab-booking-application/tests/unit/controllers/history-test.js","cab-booking-application/tests/unit/controllers/locations-test.js","cab-booking-application/tests/unit/controllers/login-test.js","cab-booking-application/tests/unit/controllers/nav-pane-test.js","cab-booking-application/tests/unit/controllers/register-test.js","cab-booking-application/tests/unit/controllers/routes-test.js","cab-booking-application/tests/unit/controllers/trips-test.js","cab-booking-application/tests/unit/routes/application-test.js","cab-booking-application/tests/unit/routes/bookings-test.js","cab-booking-application/tests/unit/routes/drivers-test.js","cab-booking-application/tests/unit/routes/history-test.js","cab-booking-application/tests/unit/routes/locations-test.js","cab-booking-application/tests/unit/routes/login-test.js","cab-booking-application/tests/unit/routes/register-test.js","cab-booking-application/tests/unit/routes/routes-test.js","cab-booking-application/tests/unit/routes/signin-test.js","cab-booking-application/tests/unit/routes/trips-test.js","cab-booking-application/tests/unit/services/location-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('cab-booking-application/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/nav-pane.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-pane.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bookings.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/bookings.js should pass ESLint\\n\\n113:18 - \\'error\\' is defined but never used. (no-unused-vars)\\n124:15 - \\'response\\' is defined but never used. (no-unused-vars)\\n131:17 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/drivers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/drivers.js should pass ESLint\\n\\n133:19 - \\'response\\' is defined but never used. (no-unused-vars)\\n141:19 - Unexpected console statement. (no-console)\\n157:19 - \\'response\\' is defined but never used. (no-unused-vars)\\n167:19 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/history.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/history.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/locations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/locations.js should pass ESLint\\n\\n67:35 - \\'Em\\' is not defined. (no-undef)\\n77:15 - \\'resolve\\' is not defined. (no-undef)\\n81:15 - Unexpected console statement. (no-console)\\n90:19 - \\'response\\' is defined but never used. (no-unused-vars)\\n96:19 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n4:10 - \\'parseJwtToken\\' is defined but never used. (no-unused-vars)\\n82:10 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/register.js should pass ESLint\\n\\n161:13 - \\'response\\' is defined but never used. (no-unused-vars)\\n164:14 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/routes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/routes.js should pass ESLint\\n\\n93:28 - \\'nextLocation\\' is assigned to itself. (no-self-assign)\\n124:32 - \\'Em\\' is not defined. (no-undef)\\n135:15 - Unexpected console statement. (no-console)\\n147:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/trips.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/trips.js should pass ESLint\\n\\n28:19 - Unexpected console statement. (no-console)\\n41:19 - \\'response\\' is defined but never used. (no-unused-vars)\\n53:19 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/equals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/equals.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/shiftlabel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/shiftlabel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/statuslabel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/statuslabel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n2:10 - \\'routeValidate\\' is defined but never used. (no-unused-vars)\\n13:35 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('routes/bookings.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bookings.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/drivers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/drivers.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/history.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/history.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/locations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/locations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/routes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/routes.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/trips.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/trips.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/location.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/location.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/util.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'utils/util.js should pass ESLint\\n\\n2:10 - \\'getOwner\\' is defined but never used. (no-unused-vars)\\n36:9 - Unexpected console statement. (no-console)\\n37:9 - Unexpected console statement. (no-console)');\n  });\n});","define('cab-booking-application/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('cab-booking-application/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  };\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  };\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  };\n});","define('cab-booking-application/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'cab-booking-application/tests/helpers/start-app', 'cab-booking-application/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('cab-booking-application/tests/helpers/resolver', ['exports', 'cab-booking-application/resolver', 'cab-booking-application/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('cab-booking-application/tests/helpers/start-app', ['exports', 'cab-booking-application/app', 'cab-booking-application/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('cab-booking-application/tests/integration/components/location-dropdown-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('location-dropdown', 'Integration | Component | location dropdown', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ig5FWro2\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"location-dropdown\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1Ionrp+e\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"location-dropdown\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('cab-booking-application/tests/integration/components/nav-pane-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-pane', 'Integration | Component | nav pane', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WSALcLT5\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"nav-pane\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"scYOCpV3\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"nav-pane\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('cab-booking-application/tests/integration/helpers/is-equals-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('is-equals', 'helper:is-equals', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Bm1gYQZS\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"is-equals\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('cab-booking-application/tests/integration/helpers/shiftlabel-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('shiftlabel', 'helper:shiftlabel', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"n6enWpGF\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"shiftlabel\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('cab-booking-application/tests/integration/helpers/statuslabel-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('statuslabel', 'helper:statuslabel', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"gPRR0U4O\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"statuslabel\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('cab-booking-application/tests/test-helper', ['cab-booking-application/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('cab-booking-application/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/location-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/location-dropdown-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/nav-pane-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-pane-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/is-equals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/is-equals-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/shiftlabel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/shiftlabel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/statuslabel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/statuslabel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/boookings-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/boookings-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/drivers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/drivers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/history-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/history-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/locations-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/locations-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/nav-pane-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/nav-pane-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/routes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/routes-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/trips-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/trips-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bookings-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bookings-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/drivers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/drivers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/history-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/history-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/locations-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/locations-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/routes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/routes-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/signin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/signin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/trips-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/trips-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/location-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/location-test.js should pass ESLint\\n\\n');\n  });\n});","define('cab-booking-application/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/boookings-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:boookings', 'Unit | Controller | boookings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/drivers-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:drivers', 'Unit | Controller | drivers', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/history-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:history', 'Unit | Controller | history', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/locations-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:locations', 'Unit | Controller | locations', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/nav-pane-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:nav-pane', 'Unit | Controller | nav pane', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:register', 'Unit | Controller | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/routes-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:routes', 'Unit | Controller | routes', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/controllers/trips-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:trips', 'Unit | Controller | trips', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('cab-booking-application/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/bookings-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:bookings', 'Unit | Route | bookings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/drivers-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:drivers', 'Unit | Route | drivers', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/history-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:history', 'Unit | Route | history', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/locations-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:locations', 'Unit | Route | locations', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:register', 'Unit | Route | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/routes-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:routes', 'Unit | Route | routes', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/signin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:signin', 'Unit | Route | signin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/routes/trips-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:trips', 'Unit | Route | trips', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cab-booking-application/tests/unit/services/location-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:location', 'Unit | Service | location', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('cab-booking-application/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfile":"tests.js"}